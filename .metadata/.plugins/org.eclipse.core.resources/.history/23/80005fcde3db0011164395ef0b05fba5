package cn.amose.yuzhong.database;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.preference.PreferenceManager;
import cn.amose.yuzhong.util.Constant;

public final class Preferences {
	private static final String PREFERENCES_ACCOUNT_ID = "account_id";
	private static final String PREFERENCES_ACCOUNT_LOGIN_NAME = "account_loginname";
	private static final String PREFERENCES_ACCOUNT_NICKNAME = "account_nickname";
	private static final String PREFERENCES_ACCOUNT_AGE = "account_age";
	private static final String PREFERENCES_ACCOUNT_GENDER = "account_gender";
	private static final String PREFERENCES_ACCOUNT_AVATAR = "account_avatarurl";
	private static final String PREFERENCES_ACCOUNT_PASSWORD = "account_password";
	private static final String PREFERENCES_ACCOUNT_TYPE = "account_type";
	private static final String PREFERENCES_TOKEN_QQ = "qq_token";
	private static final String PREFERENCES_TOKEN_SINA = "sina_token";
	private static final String PREFERENCES_EXPIRES_IN_QQ = "qq_expiresin";
	private static final String PREFERENCES_EXPIRES_IN_SINA = "sina_expiresin";
	private static final String PREFERENCES_EXPIRES_IN_UID = "sina_uid";
	private static final String PREFERENCES_SHARE_QQ = "share_qq";
	private static final String PREFERENCES_SHARE_SINA = "share_sina";
	private static final String PREFERENCES_TOKEN_SECRET_QQ = "qq_tokensecret";
	private static final String PREFERENCES_VERIFIER_QQ = "qq_verifier";
	private static final String PREFERENCES_VERSION_UPDATE_TIME = "update_time";
	private static final String PREFERENCES_FIRST_STARTUP = "fiststartup";

	private static SharedPreferences sSHARED_REFERENCES = null;
	private static User sUSER;
	private static Context sAPPLICATION_CONTEXT;

	private Preferences() {
	}

	public static void init(Context context) {
		if (sSHARED_REFERENCES == null) {
			sAPPLICATION_CONTEXT = context.getApplicationContext();
			sSHARED_REFERENCES = PreferenceManager
					.getDefaultSharedPreferences(sAPPLICATION_CONTEXT);
		}
	}

	public static boolean initDefaultAccount(User user) {
		return updateDefaultAccount(user);
	}

	public static boolean updateDefaultAccount(User user) {
		Editor editor = sSHARED_REFERENCES.edit();
		editor.putInt(PREFERENCES_ACCOUNT_AGE, user.getAge());
		editor.putString(PREFERENCES_ACCOUNT_LOGIN_NAME, user.getLoginName());
		editor.putString(PREFERENCES_ACCOUNT_NICKNAME, user.getNickname());
		editor.putInt(PREFERENCES_ACCOUNT_ID, user.getId());
		editor.putInt(PREFERENCES_ACCOUNT_GENDER, user.getGender());
		editor.putString(PREFERENCES_ACCOUNT_AVATAR, user.getAvatarUrl());
		editor.putString(PREFERENCES_ACCOUNT_PASSWORD, user.getPassword());

		boolean flag = editor.commit();
		if (flag) {
			sUSER = user;
		}
		return flag;
	}

	public static User getDefaultAccount() {
		if (sUSER == null) {
			sUSER = new User();
			sUSER.setAge(sSHARED_REFERENCES.getInt(PREFERENCES_ACCOUNT_AGE, 0));
			sUSER.setGender(sSHARED_REFERENCES.getInt(
					PREFERENCES_ACCOUNT_GENDER, 0));
			sUSER.setId(sSHARED_REFERENCES.getInt(PREFERENCES_ACCOUNT_ID, 0));
			sUSER.setLoginName(sSHARED_REFERENCES.getString(
					PREFERENCES_ACCOUNT_LOGIN_NAME, null));
			sUSER.setNickname(sSHARED_REFERENCES.getString(
					PREFERENCES_ACCOUNT_NICKNAME, null));
			sUSER.setAvatarUrl(sSHARED_REFERENCES.getString(
					PREFERENCES_ACCOUNT_AVATAR, null));
			sUSER.setPassword(sSHARED_REFERENCES.getString(
					PREFERENCES_ACCOUNT_PASSWORD, null));
		}
		return sUSER;
	}

	public static SharedPreferences getSharedPreferences() {
		return sSHARED_REFERENCES;
	}

	public static int getAccountId() {
		if (sUSER == null) {
			sUSER = getDefaultAccount();
		}
		return sUSER.getId();
	}

	public static void clear() {
		if (Constant.DEBUG) {
			dump();
		}
		// clear internal profile
		sUSER = null;
		Editor editor = sSHARED_REFERENCES.edit();
		editor.clear();
		editor.commit();
		setFirstStarup(false);
		// clear sina weibo
		Utility.clearCookies(sAPPLICATION_CONTEXT);
		Weibo weibo = Weibo.getInstance();
		weibo.setAccessToken(null);
		weibo = null;
		// clear qq weibo
		QQWeibo qqWeibo = QQWeibo.getInstance();
		OAuth oauth = qqWeibo.getOAuth();
		oauth.reset();
		qqWeibo = null;
		// clear local database
		DatabaseManager.initialize(sAPPLICATION_CONTEXT);
		FollowingItemHelper.clear();
		DatabaseManager.close();
	}

	public static boolean setAccountType(boolean isThrid) {
		Editor editor = sSHARED_REFERENCES.edit();
		editor.putBoolean(PREFERENCES_ACCOUNT_TYPE, isThrid);
		return editor.commit();
	}

	public static boolean isThirdAccount() {
		return sSHARED_REFERENCES.getBoolean(PREFERENCES_ACCOUNT_TYPE, false);
	}

	private static void dump() {

		StringBuilder sbWeibo = new StringBuilder();
		sbWeibo.append("########################## MOMKID PREFRENCES {"
				+ new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date(
						System.currentTimeMillis()))
				+ "}##########################\r\n");
		Map<String, ?> prefs = Preferences.sSHARED_REFERENCES.getAll();
		Iterator<?> iterator = prefs.entrySet().iterator();
		while (iterator.hasNext()) {
			Entry<String, Object> entry = (Entry<String, Object>) iterator
					.next();
			sbWeibo.append("\t").append(entry.getKey()).append("\t")
					.append(entry.getValue()).append("\r\n");
		}
		sbWeibo.append("########################## MOMKID PREFRENCES ##########################\r\n");
		System.out.println(sbWeibo.toString());
	}

	public static String getSinaToken() {
		return sSHARED_REFERENCES.getString(PREFERENCES_TOKEN_SINA, "");
	}

	public static String getQQToken() {
		return sSHARED_REFERENCES.getString(PREFERENCES_TOKEN_QQ, "");
	}

	public static String getQQExpiresIn() {
		return sSHARED_REFERENCES.getString(PREFERENCES_EXPIRES_IN_QQ, "0");
	}

	public static String getSinaExpiresIn() {
		return sSHARED_REFERENCES.getString(PREFERENCES_EXPIRES_IN_SINA, "0");
	}

	public static String getQQTokenSecret() {
		return sSHARED_REFERENCES.getString(PREFERENCES_TOKEN_SECRET_QQ, "");
	}

	public static String getQQVerifier() {
		return sSHARED_REFERENCES.getString(PREFERENCES_VERIFIER_QQ, "");
	}

	public static String getSinaUid() {
		return sSHARED_REFERENCES.getString(PREFERENCES_EXPIRES_IN_UID, "");
	}

	public static boolean setSinaAccessToken(String token, String expiresIn,
			String uid) {
		Editor editor = sSHARED_REFERENCES.edit();
		editor.putString(PREFERENCES_TOKEN_SINA, token);
		editor.putString(PREFERENCES_EXPIRES_IN_SINA, expiresIn);
		editor.putString(PREFERENCES_EXPIRES_IN_UID, uid);
		return editor.commit();
	}

	public static boolean setQQAccessToken(String token, String tokenSecret,
			String verifier, String expiresIn) {
		Editor editor = sSHARED_REFERENCES.edit();
		editor.putString(PREFERENCES_TOKEN_QQ, token);
		editor.putString(PREFERENCES_TOKEN_SECRET_QQ, tokenSecret);
		editor.putString(PREFERENCES_VERIFIER_QQ, verifier);
		editor.putString(PREFERENCES_EXPIRES_IN_QQ, expiresIn);
		return editor.commit();
	}

	public static boolean setShareToQQWeibo(boolean isShare) {
		Editor editor = sSHARED_REFERENCES.edit();
		editor.putBoolean(PREFERENCES_SHARE_QQ, isShare);
		return editor.commit();
	}

	public static boolean setShareToSinaWeibo(boolean isShare) {
		Editor editor = sSHARED_REFERENCES.edit();
		editor.putBoolean(PREFERENCES_SHARE_SINA, isShare);
		return editor.commit();
	}

	public static boolean isShareToSinaWeibo() {
		return sSHARED_REFERENCES.getBoolean(PREFERENCES_SHARE_SINA, false);
	}

	public static boolean isShareToQQWeibo() {
		return sSHARED_REFERENCES.getBoolean(PREFERENCES_SHARE_QQ, false);
	}

	// version control
	public static boolean setVersionUpdateTime(long time) {
		Editor editor = sSHARED_REFERENCES.edit();
		editor.putLong(PREFERENCES_VERSION_UPDATE_TIME, time);
		return editor.commit();
	}

	public static long getVersionUpdateTime() {
		return sSHARED_REFERENCES.getLong(PREFERENCES_VERSION_UPDATE_TIME, 0);
	}

	public static boolean isFirstStarup() {
		return sSHARED_REFERENCES.getBoolean(PREFERENCES_FIRST_STARTUP, true);
	}

	public static boolean setFirstStarup(boolean isFirstStartup) {
		Editor editor = sSHARED_REFERENCES.edit();
		editor.putBoolean(PREFERENCES_FIRST_STARTUP, isFirstStartup);
		return editor.commit();
	}

}
